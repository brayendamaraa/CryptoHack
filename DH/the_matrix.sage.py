

# This file was *autogenerated* from the file the_matrix.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_50 = Integer(50); _sage_const_31337 = Integer(31337); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_10 = Integer(10); _sage_const_12 = Integer(12); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8); _sage_const_6 = Integer(6)
from random import random, randint

P = _sage_const_2 
N = _sage_const_50 
E = _sage_const_31337 

def bytes_to_binary(s):
    bin_str = ''.join(format(b, '08b') for b in s)
    bits = [int(c) for c in bin_str]
    return bits

def generate_mat():
    while True:
        msg = bytes_to_binary(FLAG)
        msg += [randint(_sage_const_0 , _sage_const_1 ) for _ in range(N*N - len(msg))]

        rows = [msg[i::N] for i in range(N)]
        mat = Matrix(GF(_sage_const_2 ), rows)

        if mat.determinant() != _sage_const_0  and mat.multiplicative_order() > _sage_const_10 **_sage_const_12 :
            return mat

def load_matrix(fname):
    data = open(fname, 'r').read().strip()
    rows = [list(map(int, row)) for row in data.splitlines()]
    return Matrix(GF(P), rows)

def save_matrix(M, fname):
    open(fname, 'w').write('\n'.join(''.join(str(x) for x in row) for row in M))

def flatten_matrix(M):
    """
    Flatten a Sage matrix into a flat tuple (row-major order).
    """
    return tuple(M.list()) 

def bitstring_to_bytes(bitstring):
    """
    Converts a binary string like '110101' into a bytes object.
    Pads the string on the left with zeros to make a multiple of 8.
    """
    bitstring = bitstring.zfill((len(bitstring) + _sage_const_7 ) // _sage_const_8  * _sage_const_8 )  # pad to multiple of 8 bits
    return int(bitstring, _sage_const_2 ).to_bytes(len(bitstring) // _sage_const_8 , byteorder='big')

mat = load_matrix('flag.enc')

m_ord = mat.multiplicative_order()

for i in range(_sage_const_1 ,_sage_const_10 **_sage_const_6 ):
    n = i * m_ord
    if gcd(n, E) != _sage_const_1 :
        continue
    D = pow(int(E), int(-_sage_const_1 ), int(n))
    M = mat**D
    msg = flatten_matrix(M)
    FLAG = bitstring_to_bytes(''.join(map(str, msg)))
    if FLAG.startswith(b'crypto{'):
        print(FLAG)
        break

# D = pow(E, -1, mat.multiplicative_order())

# M = mat^D
# msg = flatten_matrix(M)
# FLAG = bitstring_to_bytes(''.join(map(str, msg)))
# print(FLAG)

